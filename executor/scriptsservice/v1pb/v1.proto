syntax = "proto3";

package kobun4.executor.scripts.v1;

import "executor/accountsservice/v1pb/v1.proto";

option go_package = "v1pb";

message Meta {
    string description = 1;
}

message Context {
    string bridge_name = 1;
    string command_name = 2;

    // User info.
    string user_id = 11;
    string channel_id = 12;
    string group_id = 13;
    string network_id = 14;

    // Flavor.
    string script_command_prefix = 31;

    map<string, string> extra = 1000;
}

message CreateRequest {
    string owner_name = 1;
    string name = 2;
    Meta meta = 3;
    bytes content = 4;
}

message CreateResponse {
}

message ListRequest {
    string owner_name = 1;
}

message ListResponse {
    repeated string name = 1;
}

message DeleteRequest {
    string owner_name = 1;
    string name = 2;
}

message DeleteResponse {
}

message ExecuteRequest {
    string owner_name = 1;
    string name = 2;
    bytes stdin = 3;
    Context context = 4;
    string bridge_target = 5;
}

message OutputParams {
    string format = 1;
    bool private = 2;
}

message ExecuteResponse {
    uint32 wait_status = 1;
    bytes stdout = 2;
    bytes stderr = 3;
    OutputParams output_params = 4;
}

message WorkerExecutionRequest {
    message Configuration {
        string containers_path = 2;
        string chroot = 3;

        string hostname = 10;

        string private_storage_path = 21;
        string script_path = 22;
        string k4_library_path = 23;

        uint32 uid = 31;
        uint32 gid = 32;
    }

    Configuration config = 1;

    string owner_name = 11;
    string name = 12;

    Context context = 20;

    kobun4.executor.accounts.v1.Traits traits = 30;
}

message WorkerExecutionResult {
    uint32 wait_status = 1;
    bool time_limit_exceeded = 2;
    OutputParams output_params = 3;
}

message GetContentRequest {
    string owner_name = 1;
    string name = 2;
}

message GetContentResponse {
    bytes content = 1;
}

message GetMetaRequest {
    string owner_name = 1;
    string name = 2;
}

message GetMetaResponse {
    Meta meta = 1;
}

service Scripts {
    rpc Create(CreateRequest) returns (CreateResponse) { }
    rpc List(ListRequest) returns (ListResponse) { }
    rpc Delete(DeleteRequest) returns (DeleteResponse) { }
    rpc Execute(ExecuteRequest) returns (ExecuteResponse) { }

    rpc GetContent(GetContentRequest) returns (GetContentResponse) { }

    rpc GetMeta(GetMetaRequest) returns (GetMetaResponse) { }
}
